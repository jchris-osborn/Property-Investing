import numpy as np
import pandas as pd
import requests
import bs4
import lxml.etree as xml
from selenium import webdriver
import os
import time
from google.colab import files

#IMPORTING DATA
file = pd.read_csv("/content/zip_codes.csv")

#CREATING DATAFRAME
data = pd.DataFrame(file)
print(data.head())

#removing useless columns
col = ["StateName", "State", "City", "Metro", "CountyName", "SizeRank", 
       "RegionType", "RegionID"]
data = data.drop(columns = col )
print(data.head())

zips = data['RegionName'].tolist()

temp_list = zips[21001:23000]

zips = temp_list

options = webdriver.ChromeOptions()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('ignore-certificate-errors')

driver = webdriver.Chrome('chromedriver',options=options)

comfort_dict = {}
err_list = []

for query in zipcodes:
  try:
    thing_url = "https://www.bestplaces.net/"
    driver.get(thing_url)
    time.sleep(1)

    searchbox = driver.find_element_by_id("txtSearch")
    searchbox.click()
    searchbox.send_keys(str(query))

    submit_button = driver.find_element_by_xpath('/html/body/form/div[3]/div/div/div[1]/div[1]/div/input[2]')
    submit_button.click()

    window_after = driver.window_handles[0]
    driver.switch_to.window(window_after)
    time.sleep(1)

    page = driver.current_url
    r = requests.get(page, verify=False)
    soup = bs4.BeautifulSoup(r.content, "html.parser")

    mydiv = soup.find_all('div', {'class': 'col-md-3 px-1'})
    last_col = mydiv[-1].find_all('p', {'style': 'font-size:33px;'})

    pop = mydiv[0].find_all('p', {'class': 'text-center py-0 my-0'})
    text = pop[-1].getText()

    iter = 0
    for element in range(0, len(text)): 
        if(text[element] == '%'):
          break
        else:
          iter += 1

    text = float(text[:iter])

    a = last_col[1].getText()
    num = float(a[:3])

    comfort_dict[query] = {'score': num, 'Population Change': text}

  except Exception as e:
    print(e)
    comfort_dict[query] = {'score': 0, 'Population Change': 0}

df = pd.DataFrame.from_dict(data=comfort_dict, orient='index')
df.to_csv('comfort24.csv')

er = pd.DataFrame(err_list)
er.to_csv('comforterr24.csv')

files.download('comfort24.csv')
files.download('comforterr24.csv')
